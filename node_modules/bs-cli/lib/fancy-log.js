'use strict';

const Console = require('console').Console;
const gray = require('ansi-gray');
const timestamp = require('time-stamp');
const supportsColor = require('color-support');
const nodeVersion = require('parse-node-version')(process.version);
const fs = require('fs');

let colorDetectionOptions = {
  // If on Windows, ignore the isTTY check
  // This is due to AppVeyor (and thus probably common Windows platforms?) failing the check
  // TODO: If this is too broad, we can reduce it to an APPVEYOR env check
  ignoreTTY: process.platform === 'win32',
};

// Needed to add this because node 10 decided to start coloring log output randomly
let console;
if (nodeVersion.major >= 10) {
  // Node 10 also changed the way this is constructed
  console = new Console({
    stdout: process.stdout,
    stderr: process.stderr,
    colorMode: false,
  });
} else {
  console = new Console(process.stdout, process.stderr);
}

function hasFlag(flag) {
  return process.argv.indexOf('--' + flag) !== -1;
}

function addColor(str) {
  if (hasFlag('no-color')) {
    return str;
  }

  if (hasFlag('color')) {
    return gray(str);
  }

  if (supportsColor(colorDetectionOptions)) {
    return gray(str);
  }

  return str;
}

function getTimestamp(noTime) {
  const currentTime = timestamp('YYYY/MM/DD HH:mm:ss');
  return {
    color: noTime ? '' : '[' + addColor(currentTime) + ']',
    noColor: noTime ? '' : '[' + currentTime + ']',
  };
}

function log(text, logPath, logText, noTime) {
  let time = getTimestamp(noTime);

  if (logPath) {
    const logTxt = logText ? time.noColor + ' ' + logText + '\n' : '\n';
    const logger = fs.createWriteStream(logPath, { flags: 'a' });
    logger.write(logTxt);
    logger.end();
  }
  if (text) process.stdout.write(time.color + ' ');
  console.log.apply(console, [text || '']);
  return this;
}

module.exports = log;
