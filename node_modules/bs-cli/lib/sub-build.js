const fs = require('fs');
const path = require('path');
const rimraf = require('rimraf');
const copyfiles = require('copyfiles');
const logger = require('./logger');

const stat = cPath => {
  let result = {
    isExists: true,
    isDir: false,
    isFile: false,
  };
  try {
    let cStat = fs.statSync(cPath);
    result.isDir = cStat.isDirectory();
    result.isFile = cStat.isFile();
  } catch (error) {
    result.isExists = false;
  }
  return result;
};

const resolveFiles = (currentPath, src) => {
  //屏蔽.开头的文件、文件夹
  let srcPath = src ? src : currentPath;
  let files = fs.readdirSync(currentPath).filter(v => !/^\./.test(v));
  files.forEach(item => {
    const itemPath = path.join(currentPath, item);
    let { isExists, isDir, isFile } = stat(itemPath);
    if (!isExists) {
      logger.err(`Not Exists: the '${itemPath}' is not exists!`);
    }
    if (isDir) {
      return resolveFiles(itemPath, srcPath);
    } else if (isFile) {
      fs.readFile(itemPath, (err, data) => {
        let str = data.toString();
        if (!!str.match(/(?<=")\@\/\S+(?=")/gm)) {
          let matchArr = [];
          const relativePath =
            path.relative(currentPath, srcPath).replace(/\\/g, '/') || '.';
          let result = str.replace(/(?<=")\@\/\S+(?=")/g, match => {
            const obj = {
              before: match,
            };
            obj.now = match.replace(/\@/, relativePath);
            matchArr.push(obj);
            return obj.now;
          });

          fs.writeFile(itemPath, result, err => {
            if (!err) {
              matchArr.forEach((v, index, arr) => {
                let prefix =
                  index === 0 ? `Convert ${matchArr.length} alias ` : '';
                if (index === 0) {
                  logger.success('');
                  logger.success(`${prefix} in '${itemPath}'`);
                }
                logger.success(`'${v.before}' to '${v.now}'`);
              });
            }
          });
        }
      });
    }
  });
};

module.exports = (currentPath, arg) => {
  const noDist = arg.includes('--no-dist');

  if (noDist) {
    resolveFiles(path.join(currentPath, 'src'));
  } else {
    //修改执行目录，以供copyfiles使用
    process.chdir(currentPath);
    const dist = path.join(currentPath, 'dist');
    const src = path.join(currentPath, 'src');
    const { isExists, isDir, isFile } = stat(src);
    if (!isExists || isFile) {
      logger.err(
        `Error: The '${src}' is not exists or not a folder, please check it`
      );
    }
    if (isDir) {
      rimraf(dist, error => {
        if (!error) {
          copyfiles(['src/**/*', 'dist'], error => {
            if (!error) {
              const cPath = path.join(currentPath, 'dist', 'src');
              resolveFiles(cPath);
            }
          });
        }
      });
    }
  }
};
