const fs = require('fs');
const path = require('path');
const validator = require('validator');
const inquirer = require('inquirer');
const exec = require('child_process').exec;
const logger = require('./logger');
const { getNewVersion } = require('./utils');

module.exports = (currentPath, arg) => {
  process.chdir(currentPath);
  const packagePath = path.join(currentPath, 'package.json');
  if (!fs.existsSync(packagePath)) {
    logger.err(`Not found: ${currentPath} not contains a package.json`);
  }
  fs.readFile(packagePath, (err, data) => {
    if (!err) {
      if (validator.isJSON(data.toString())) {
        const package = JSON.parse(data.toString());
        const getLatest = `npm view ${package.name} versions --json`;
        const versionPatch = `npm version --no-git-tag-version patch`;
        // get latest version of item
        exec(getLatest, (error, stdout, stderr) => {
          if (!error) {
            //npm view version will sort the version array
            let versions = JSON.parse(stdout.replace(/(\r\n\t|\n|\r\t)/gm, ''));
            if (versions.length === 0) {
              logger.err(
                `Not Exists: Can not find ${package.name} in current npm registry`
              );
            }
            const newVersion = getNewVersion(package, versions);

            if (!newVersion) {
              logger.err(
                `Not Exists: Can not find version in '${packagePath}'`
              );
            }
            package.version = newVersion;
            const result = JSON.stringify(package, null, 2);
            fs.writeFile(packagePath, result, err => {
              if (!err) {
                //npm version patch
                exec(versionPatch, (error, stdout, stderr) => {
                  if (!error) {
                    const newVersion = stdout.replace(
                      /(\r\n\t|\n|\r\t|v)/gm,
                      ''
                    );
                    logger.success(
                      `Get "${package.name}" latest version "${package.version}" and updated it to "${newVersion}"!`
                    );
                  } else {
                    logger.err(
                      `Executed command "${versionPatch}" fail! \n\n${error}`
                    );
                  }
                });
              } else {
                logger.err(
                  `Write "${package.name}" latest version fail !\n\nFile path: "${packagePath}"]"`
                );
              }
            });
          } else {
            if (/code\sE404/.test(error.message)) {
              function publishItem(implicit) {
                exec('npm publish', (error, stdout, stderr) => {
                  if (!error) {
                    logger.success(`${stdout}`);
                    process.exit();
                  } else {
                    logger.err(`Published Error :\n${stderr}`);
                  }
                });
              }
              //不存在发布当前版本
              if (arg.includes('--implicit-publish')) {
                publishItem(true);
              } else {
                inquirer
                  .prompt([
                    {
                      type: 'list',
                      message: `The ${package.name}@${package.version} is not in npm registry, publish' it now?`,
                      name: 'publishIt',
                      choices: ['yes', 'no'],
                    },
                  ])
                  .then(function(answer) {
                    if (answer.publishIt === 'yes') {
                      publishItem();
                    } else {
                      process.exit();
                    }
                  });
              }
            } else {
              logger.err(`Executed command "${getLatest}" fail! \n\n${error}`);
            }
          }
        });
      } else {
        logger.err(`Not JSON: "${packagePath}" is not a right json file`);
      }
    } else {
      logger.err(err);
    }
  });
};
